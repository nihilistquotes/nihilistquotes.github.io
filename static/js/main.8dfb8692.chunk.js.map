{"version":3,"sources":["Quotes.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Quotes","state","quotes","title","quote","index","hidden","toggleHidden","_this","setState","changeQuote","setTimeout","length","this","clearTimeout","react_default","a","createElement","id","className","join","onClick","React","Component","Footer","href","target","rel","App","src_Quotes","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAiDeA,6MA9CbC,MAAQ,CACNC,OAAQ,CACN,CAAEC,MAAO,qBACT,CAAEA,MAAO,kCACT,CAAEA,MAAO,0BACT,CAAEA,MAAO,uDAEXC,MAAO,GACPC,MAAO,EACPC,QAAQ,KAWVC,aAAe,WACXC,EAAKC,SAAU,CAAEH,QAASE,EAAKP,MAAMK,YAGzCI,YAAc,WACZF,EAAKC,SAAU,CAAEH,QAAQ,IACzBK,WAAW,WACT,IAAMN,EAAQG,EAAKP,MAAMI,QAAUG,EAAKP,MAAMC,OAAOU,OAAO,EAAI,EAAIJ,EAAKP,MAAMI,MAAM,EACrFG,EAAKC,SAAU,CAAEJ,QAAOC,QAAQ,KAC/B,KACHK,WAAWH,EAAKE,YAAa,yFAjB3BC,WAAWE,KAAKH,YAAa,kDAI7BI,aAAaD,KAAKH,8CAiBpB,OACEK,EAAAC,EAAAC,cAAA,OACEC,GAAG,cACHC,UAAW,CAAC,SAASN,KAAKZ,MAAMK,OAAS,SAAW,IAAIc,KAAK,KAC7DC,QAASR,KAAKN,cAEZM,KAAKZ,MAAMC,OAAOW,KAAKZ,MAAMI,OAAOF,cAzCzBmB,IAAMC,WCSZC,EATA,WACb,OACET,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,8BAA8BC,OAAO,SAASC,IAAI,uBAA1D,kBCUSC,MATf,WACE,OACEb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8dfb8692.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Quotes extends React.Component {\n  state = {\n    quotes: [\n      { title: \"It is what it is.\" },\n      { title: \"You are a victim of your past.\" },\n      { title: \"What contains the box?\" },\n      { title: \"What you don't wanna think about wastes your time.\" },\n    ],\n    quote: \"\",\n    index: 0,\n    hidden: true\n  };\n\n  componentDidMount(){\n      setTimeout(this.changeQuote, 0);\n      //setInterval(this.toggleHidden, 4000);\n  }\n  componentWillUnmount(){\n      clearTimeout(this.changeQuote);\n  }\n\n  toggleHidden = () => {\n      this.setState( { hidden: !this.state.hidden } );\n  }\n\n  changeQuote = () => {\n    this.setState( { hidden: true } );\n    setTimeout(()=>{\n      const index = this.state.index === this.state.quotes.length-1 ? 0 : this.state.index+1;\n      this.setState( { index, hidden: false } );\n    }, 1000);\n    setTimeout(this.changeQuote, 4000)\n  };\n\n  render() {\n    return (\n      <div\n        id=\"activeQuote\"\n        className={[\"Quotes\",this.state.hidden ? \"hidden\" : \"\"].join(' ')}\n        onClick={this.toggleHidden}\n      >\n        { this.state.quotes[this.state.index].title }\n      </div>\n    );\n  }\n}\n\nexport default Quotes;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div className=\"Footer\">\n      <a href=\"https://surajk95.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Quotes by Su\n      </a>\n    </div>\n  );\n}\nexport default Footer;\n","import React from 'react';\nimport './App.scss';\n\nimport Quotes from './Quotes.js';\nimport Footer from './Footer.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quotes/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}